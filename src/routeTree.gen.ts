/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as AuthRouteImport } from './routes/_auth'
import { Route as IndexRouteImport } from './routes/index'
import { Route as SignUpSplatRouteImport } from './routes/sign-up.$'
import { Route as SignInSplatRouteImport } from './routes/sign-in.$'
import { Route as AuthInvoicesRouteImport } from './routes/_auth.invoices'
import { Route as AuthDashboardRouteImport } from './routes/_auth.dashboard'
import { Route as AuthInvoicesIndexRouteImport } from './routes/_auth.invoices.index'
import { Route as AuthInvoicesInvoiceIdRouteImport } from './routes/_auth.invoices.$invoiceId'

const AuthRoute = AuthRouteImport.update({
  id: '/_auth',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const SignUpSplatRoute = SignUpSplatRouteImport.update({
  id: '/sign-up/$',
  path: '/sign-up/$',
  getParentRoute: () => rootRouteImport,
} as any)
const SignInSplatRoute = SignInSplatRouteImport.update({
  id: '/sign-in/$',
  path: '/sign-in/$',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthInvoicesRoute = AuthInvoicesRouteImport.update({
  id: '/invoices',
  path: '/invoices',
  getParentRoute: () => AuthRoute,
} as any)
const AuthDashboardRoute = AuthDashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => AuthRoute,
} as any)
const AuthInvoicesIndexRoute = AuthInvoicesIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthInvoicesRoute,
} as any)
const AuthInvoicesInvoiceIdRoute = AuthInvoicesInvoiceIdRouteImport.update({
  id: '/$invoiceId',
  path: '/$invoiceId',
  getParentRoute: () => AuthInvoicesRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/dashboard': typeof AuthDashboardRoute
  '/invoices': typeof AuthInvoicesRouteWithChildren
  '/sign-in/$': typeof SignInSplatRoute
  '/sign-up/$': typeof SignUpSplatRoute
  '/invoices/$invoiceId': typeof AuthInvoicesInvoiceIdRoute
  '/invoices/': typeof AuthInvoicesIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/dashboard': typeof AuthDashboardRoute
  '/sign-in/$': typeof SignInSplatRoute
  '/sign-up/$': typeof SignUpSplatRoute
  '/invoices/$invoiceId': typeof AuthInvoicesInvoiceIdRoute
  '/invoices': typeof AuthInvoicesIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_auth': typeof AuthRouteWithChildren
  '/_auth/dashboard': typeof AuthDashboardRoute
  '/_auth/invoices': typeof AuthInvoicesRouteWithChildren
  '/sign-in/$': typeof SignInSplatRoute
  '/sign-up/$': typeof SignUpSplatRoute
  '/_auth/invoices/$invoiceId': typeof AuthInvoicesInvoiceIdRoute
  '/_auth/invoices/': typeof AuthInvoicesIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/invoices'
    | '/sign-in/$'
    | '/sign-up/$'
    | '/invoices/$invoiceId'
    | '/invoices/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/dashboard'
    | '/sign-in/$'
    | '/sign-up/$'
    | '/invoices/$invoiceId'
    | '/invoices'
  id:
    | '__root__'
    | '/'
    | '/_auth'
    | '/_auth/dashboard'
    | '/_auth/invoices'
    | '/sign-in/$'
    | '/sign-up/$'
    | '/_auth/invoices/$invoiceId'
    | '/_auth/invoices/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthRoute: typeof AuthRouteWithChildren
  SignInSplatRoute: typeof SignInSplatRoute
  SignUpSplatRoute: typeof SignUpSplatRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/sign-up/$': {
      id: '/sign-up/$'
      path: '/sign-up/$'
      fullPath: '/sign-up/$'
      preLoaderRoute: typeof SignUpSplatRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/sign-in/$': {
      id: '/sign-in/$'
      path: '/sign-in/$'
      fullPath: '/sign-in/$'
      preLoaderRoute: typeof SignInSplatRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth/invoices': {
      id: '/_auth/invoices'
      path: '/invoices'
      fullPath: '/invoices'
      preLoaderRoute: typeof AuthInvoicesRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/dashboard': {
      id: '/_auth/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof AuthDashboardRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/invoices/': {
      id: '/_auth/invoices/'
      path: '/'
      fullPath: '/invoices/'
      preLoaderRoute: typeof AuthInvoicesIndexRouteImport
      parentRoute: typeof AuthInvoicesRoute
    }
    '/_auth/invoices/$invoiceId': {
      id: '/_auth/invoices/$invoiceId'
      path: '/$invoiceId'
      fullPath: '/invoices/$invoiceId'
      preLoaderRoute: typeof AuthInvoicesInvoiceIdRouteImport
      parentRoute: typeof AuthInvoicesRoute
    }
  }
}

interface AuthInvoicesRouteChildren {
  AuthInvoicesInvoiceIdRoute: typeof AuthInvoicesInvoiceIdRoute
  AuthInvoicesIndexRoute: typeof AuthInvoicesIndexRoute
}

const AuthInvoicesRouteChildren: AuthInvoicesRouteChildren = {
  AuthInvoicesInvoiceIdRoute: AuthInvoicesInvoiceIdRoute,
  AuthInvoicesIndexRoute: AuthInvoicesIndexRoute,
}

const AuthInvoicesRouteWithChildren = AuthInvoicesRoute._addFileChildren(
  AuthInvoicesRouteChildren,
)

interface AuthRouteChildren {
  AuthDashboardRoute: typeof AuthDashboardRoute
  AuthInvoicesRoute: typeof AuthInvoicesRouteWithChildren
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthDashboardRoute: AuthDashboardRoute,
  AuthInvoicesRoute: AuthInvoicesRouteWithChildren,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthRoute: AuthRouteWithChildren,
  SignInSplatRoute: SignInSplatRoute,
  SignUpSplatRoute: SignUpSplatRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
